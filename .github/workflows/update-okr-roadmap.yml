name: Update OKR Roadmap

on:
  # Trigger on file changes
  push:
    paths:
      - 'kairos-okr-data.csv'
      - 'okr-roadmap.html'
  
  # Trigger on issue changes
  issues:
    types: [opened, edited, closed, labeled]
  
  # Manual trigger
  workflow_dispatch:
  
  # Weekly automatic update
  schedule:
    - cron: '0 9 * * 1' # Every Monday at 9 AM UTC

jobs:
  update-roadmap:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: read
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          npm init -y
          npm install csv-parser cheerio
      
      - name: Create update script
        run: |
          cat > update-roadmap.js << 'EOF'
          const fs = require('fs');
          const csv = require('csv-parser');
          
          console.log('Reading CSV data...');
          const results = [];
          
          if (fs.existsSync('kairos-okr-data.csv')) {
            fs.createReadStream('kairos-okr-data.csv')
              .pipe(csv())
              .on('data', (data) => results.push(data))
              .on('end', () => {
                updateRoadmap(results);
              });
          } else {
            console.log('CSV file not found, skipping CSV update');
          }
          
          function updateRoadmap(data) {
            console.log('Processing', data.length, 'tasks');
            
            const categories = {
              Technical: { total: 0, completed: 0, totalProgress: 0 },
              Research: { total: 0, completed: 0, totalProgress: 0 },
              Community: { total: 0, completed: 0, totalProgress: 0 },
              Hardware: { total: 0, completed: 0, totalProgress: 0 }
            };
            
            data.forEach(task => {
              const category = task.Category;
              const progress = parseInt(task.Progress) || 0;
              
              if (categories[category]) {
                categories[category].total += 1;
                categories[category].totalProgress += progress;
                if (task.Status === 'Completed' || progress >= 100) {
                  categories[category].completed += 1;
                }
              }
            });
            
            const overallProgress = Math.round(
              Object.values(categories).reduce((sum, cat) => {
                return sum + (cat.total > 0 ? cat.totalProgress / cat.total : 0);
              }, 0) / 4
            );
            
            let onTrack = 0, atRisk = 0;
            Object.values(categories).forEach(cat => {
              if (cat.total > 0) {
                const avgProgress = cat.totalProgress / cat.total;
                if (avgProgress >= 70) onTrack++;
                else if (avgProgress >= 40) atRisk++;
              }
            });
            
            const reportLines = [
              '# KairOS OKR Progress Report',
              `Generated: ${new Date().toLocaleDateString()}`,
              '',
              `## Overall Progress: ${overallProgress}%`,
              '',
              '### Summary',
              '- **Active Objectives**: 4 categories',
              `- **On Track**: ${onTrack} categories`,
              `- **At Risk**: ${atRisk} categories`,
              `- **Total Tasks**: ${data.length}`,
              '',
              '### Category Breakdown'
            ];
            
            Object.entries(categories).forEach(([name, cat]) => {
              const avgProgress = cat.total > 0 ? Math.round(cat.totalProgress / cat.total) : 0;
              reportLines.push('');
              reportLines.push(`#### ${name}: ${avgProgress}% Complete`);
              reportLines.push(`- Total Tasks: ${cat.total}`);
              reportLines.push(`- Completed: ${cat.completed}`);
              reportLines.push(`- Average Progress: ${avgProgress}%`);
            });
            
            reportLines.push('');
            reportLines.push('## Recommendations');
            if (atRisk > 0) {
              reportLines.push(`‚ö†Ô∏è Focus on ${atRisk} at-risk categories`);
            } else {
              reportLines.push('‚úÖ All categories performing well');
            }
            
            if (onTrack < 3) {
              reportLines.push('üìà Improve execution velocity');
            } else {
              reportLines.push('üéØ Maintain momentum');
            }
            
            reportLines.push('');
            reportLines.push('---');
            reportLines.push(`*Last updated: ${new Date().toISOString()}*`);
            
            fs.writeFileSync('progress-report.md', reportLines.join('\n'));
            console.log('Progress report generated');
            
            const roadmapData = {
              lastUpdated: new Date().toISOString(),
              overallProgress: overallProgress,
              categories: categories,
              onTrack: onTrack,
              atRisk: atRisk,
              totalTasks: data.length,
              tasks: data
            };
            
            fs.writeFileSync('roadmap-data.json', JSON.stringify(roadmapData, null, 2));
            console.log('Roadmap data updated successfully!');
          }
          EOF
      
      - name: Update roadmap from CSV data
        run: node update-roadmap.js
      
      - name: Fetch GitHub issues for OKR tracking
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching OKR-related issues..."
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/issues?labels=okr,roadmap&state=all&per_page=100" \
               > issues.json || echo "Failed to fetch issues"
          
          if [ -f issues.json ]; then
            ISSUE_COUNT=$(cat issues.json | jq length 2>/dev/null || echo "0")
            echo "Found $ISSUE_COUNT OKR-related issues"
          fi
      
      - name: Generate milestone tracking
        run: |
          cat > milestone-tracker.js << 'EOF'
          const fs = require('fs');
          
          let tasks = [];
          
          if (fs.existsSync('kairos-okr-data.csv')) {
            const csvContent = fs.readFileSync('kairos-okr-data.csv', 'utf8');
            const lines = csvContent.split('\n').slice(1).filter(line => line.trim());
            
            tasks = lines.map(line => {
              const parts = line.split(',').map(p => p.trim());
              if (parts.length >= 6) {
                return {
                  category: parts[0],
                  objective: parts[1],
                  taskName: parts[2],
                  startDate: parts[3],
                  endDate: parts[4],
                  progress: parseInt(parts[5]) || 0,
                  status: parts[6] || 'Unknown'
                };
              }
              return null;
            }).filter(Boolean);
          }
          
          console.log('Processing', tasks.length, 'tasks for milestone tracking');
          
          const quarters = {
            'Q1 2025': { start: '2025-01-01', end: '2025-03-31', tasks: [] },
            'Q2 2025': { start: '2025-04-01', end: '2025-06-30', tasks: [] },
            'Q3 2025': { start: '2025-07-01', end: '2025-09-30', tasks: [] },
            'Q4 2025': { start: '2025-10-01', end: '2025-12-31', tasks: [] }
          };
          
          tasks.forEach(task => {
            const endDate = task.endDate;
            for (const [quarter, info] of Object.entries(quarters)) {
              if (endDate >= info.start && endDate <= info.end) {
                info.tasks.push(task);
                break;
              }
            }
          });
          
          const reportLines = [
            '# üìã KairOS Milestone Tracking Report',
            '',
            `Generated: ${new Date().toLocaleDateString()}`,
            ''
          ];
          
          Object.entries(quarters).forEach(([quarter, info]) => {
            const total = info.tasks.length;
            const completed = info.tasks.filter(t => t.status === 'Completed').length;
            const inProgress = info.tasks.filter(t => t.status === 'Active').length;
            const planned = info.tasks.filter(t => t.status === 'Planned').length;
            const avgProgress = total > 0 ? Math.round(info.tasks.reduce((sum, t) => sum + t.progress, 0) / total) : 0;
            
            reportLines.push(`## ${quarter} (${avgProgress}% Average Progress)`);
            reportLines.push('');
            reportLines.push('üìä **Status Overview:**');
            reportLines.push(`- Total Tasks: ${total}`);
            reportLines.push(`- ‚úÖ Completed: ${completed}`);
            reportLines.push(`- üîÑ In Progress: ${inProgress}`);
            reportLines.push(`- üìã Planned: ${planned}`);
            reportLines.push('');
            
            if (info.tasks.length > 0) {
              reportLines.push('üìù **Key Tasks:**');
              info.tasks.slice(0, 5).forEach(task => {
                const statusEmoji = task.status === 'Completed' ? '‚úÖ' : 
                                  task.status === 'Active' ? 'üîÑ' : 'üìã';
                reportLines.push(`- ${statusEmoji} ${task.taskName} (${task.progress}%)`);
              });
              if (info.tasks.length > 5) {
                reportLines.push(`- ... and ${info.tasks.length - 5} more tasks`);
              }
              reportLines.push('');
            }
          });
          
          reportLines.push('## üéØ Critical Path Analysis');
          reportLines.push('');
          const criticalTasks = tasks.filter(t => t.progress < 50 && t.status === 'Active');
          if (criticalTasks.length > 0) {
            reportLines.push('‚ö†Ô∏è **Tasks requiring attention:**');
            criticalTasks.forEach(task => {
              reportLines.push(`- ${task.taskName} (${task.progress}% - Due: ${task.endDate})`);
            });
          } else {
            reportLines.push('‚úÖ No critical issues identified');
          }
          
          fs.writeFileSync('milestone-report.md', reportLines.join('\n'));
          console.log('Milestone report generated');
          EOF
          
          node milestone-tracker.js
      
      - name: Update roadmap timestamp
        run: |
          # Update the HTML file with current timestamp
          if [ -f okr-roadmap.html ]; then
            sed -i.bak "s/Last updated:.*/Last updated: $(date)/" okr-roadmap.html 2>/dev/null || true
            echo "Roadmap timestamp updated"
          fi
      
      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add all generated files
          git add -A
          
          # Check if there are changes to commit
          if ! git diff --cached --quiet; then
            git commit -m "ü§ñ Auto-update OKR roadmap - $(date '+%Y-%m-%d %H:%M')"
            git push
            echo "‚úÖ Roadmap updated and pushed to repository"
          else
            echo "‚ÑπÔ∏è No changes to commit"
          fi
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./
          publish_branch: gh-pages
          enable_jekyll: false
          exclude_assets: '.github,node_modules,*.md,package*.json'
          destination_dir: roadmap
      
      - name: Create summary
        run: |
          echo "## üéØ OKR Roadmap Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f roadmap-data.json ]; then
            OVERALL_PROGRESS=$(cat roadmap-data.json | jq -r '.overallProgress // "N/A"')
            TOTAL_TASKS=$(cat roadmap-data.json | jq -r '.totalTasks // "N/A"')
            ON_TRACK=$(cat roadmap-data.json | jq -r '.onTrack // "N/A"')
            AT_RISK=$(cat roadmap-data.json | jq -r '.atRisk // "N/A"')
            
            echo "üìä **Current Status:**" >> $GITHUB_STEP_SUMMARY
            echo "- Overall Progress: ${OVERALL_PROGRESS}%" >> $GITHUB_STEP_SUMMARY
            echo "- Total Tasks: ${TOTAL_TASKS}" >> $GITHUB_STEP_SUMMARY
            echo "- Categories On Track: ${ON_TRACK}" >> $GITHUB_STEP_SUMMARY
            echo "- Categories At Risk: ${AT_RISK}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó **Links:**" >> $GITHUB_STEP_SUMMARY
          echo "- [View Interactive Roadmap](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/roadmap/okr-roadmap.html)" >> $GITHUB_STEP_SUMMARY
          echo "- [Progress Report](./progress-report.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [Milestone Report](./milestone-report.md)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Last updated: $(date)*" >> $GITHUB_STEP_SUMMARY 